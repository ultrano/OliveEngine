#pragma once
#include "OvTypeDef.h"
#include "OvRefBase.h"
#include "OvUtility_RTTI.h"
#include "OvPoint2.h"
#include "OvPoint3.h"
#include "OvQuaternion.h"
#include "OvObjectID.h"
#include "OvColor.h"
#include "OvObject.h"
#include <map>
class OvInputStream;
class OvOutputStream;
namespace OliveValue
{
	template<typename T>
	T		FromString( const OvString& str );
	template<typename T>
	OvString ToString( const T& val );

	//////////////////////////////////////////////////////////////////////////
	/// Ovint
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvInt	FromString( const OvString& str );
	template<>
	OvString ToString( const OvInt& val );
	//////////////////////////////////////////////////////////////////////////
	

	//////////////////////////////////////////////////////////////////////////
	/// OvUInt
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvUInt	FromString( const OvString& str );
	template<>
	OvString ToString( const OvUInt& val );
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	/// OvBool
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvBool	FromString( const OvString& str );
	template<>
	OvString ToString( const OvBool& val );
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	/// OvFloat
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvFloat	FromString( const OvString& str );
	template<>
	OvString ToString( const OvFloat& val );
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	/// OvPoint2
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvPoint2	FromString( const OvString& str );
	template<>
	OvString	ToString( const OvPoint2& val );
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	/// OvPoint3
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvPoint3	FromString( const OvString& str );
	template<>
	OvString	ToString( const OvPoint3& val );
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	/// OvQuaternion
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvQuaternion FromString( const OvString& str );
	template<>
	OvString	ToString( const OvQuaternion& val );
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	/// OvObjectID
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvObjectID	FromString( const OvString& str );
	template<>
	OvString	ToString( const OvObjectID& val );
	//////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////
	/// OvColor
	//////////////////////////////////////////////////////////////////////////
	template<>
	OvColor		FromString( const OvString& str );
	template<>
	OvString	ToString( const OvColor& val );
	//////////////////////////////////////////////////////////////////////////

	OvREF_POINTER(Value);
	class Value : public OvObject
	{
		OvRTTI_DECL(Value);
	public:
		virtual OvString	ValueType() = 0;
		virtual void		FromString( const OvString& str ) = 0;
		virtual OvString	ToString() = 0;
	};

}
namespace Ov = OliveValue;
#define VALUE_TYPE_DECL( type_name ) \
class Value_##type_name : public OliveValue::Value \
{\
	OvRTTI_DECL( Value_##type_name );\
	OvFACTORY_OBJECT_DECL( Value_##type_name );\
	type_name	m_value;\
public:\
	Value_##type_name(){};\
	virtual OvString	ValueType();\
	virtual void		FromString( const OvString& str );\
	virtual OvString	ToString();\
};

#define VALUE_TYPE_IMPL( type_name ) \
	OvRTTI_IMPL( Value_##type_name )\
	OvFACTORY_OBJECT_IMPL( Value_##type_name )\
	OvString	Value_##type_name::ValueType() { return OvString(#type_name); };\
	void		Value_##type_name::FromString( const OvString& str ) { m_value = Ov::FromString<type_name>( str ); };\
	OvString	Value_##type_name::ToString() { return Ov::ToString( m_value ); };

VALUE_TYPE_DECL(OvInt);
VALUE_TYPE_DECL(OvUInt);
VALUE_TYPE_DECL(OvBool);
VALUE_TYPE_DECL(OvFloat);
VALUE_TYPE_DECL(OvPoint2);
VALUE_TYPE_DECL(OvPoint3);
VALUE_TYPE_DECL(OvQuaternion);
VALUE_TYPE_DECL(OvObjectID);
VALUE_TYPE_DECL(OvColor);