#include "OvVShaderConst.h"
#include "OvPShaderConst.h"



samplerCUBE light_depth_sampler	: register(s0);

struct vertex_input
{
	float3 pos			: POSITION;
};

struct vertex_output
{
	float4 pos			: POSITION;
	float4 depth_tex0	: TEXCOORD0;
	float3 light_depth	: TEXCOORD1;
};

struct pixel_input
{
	float4 depth_tex0	: TEXCOORD0;
	float3 light_depth	: TEXCOORD1;
};

void Vmain( in vertex_input input, out vertex_output output )
{
	vector pos = vector( input.pos, 1.0 );
	float3 worldpos = mul( pos, World );
	
	output.pos			= mul( pos, WorldViewProject );
	output.depth_tex0	= float4(normalize( LightPos - worldpos ),0);
	output.light_depth	= ( LightPos - worldpos );
};

void Pmain( in pixel_input input, out vector col0 : COLOR0 )
{
	float shadow = texCUBE( light_depth_sampler, normalize(input.depth_tex0) ).x;
	
	col0 = ( shadow < length(input.light_depth.xyz) - 0.03f )? 0:1;	
	col0 = shadow;
};